/* --COPYRIGHT--,BSD_EX
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *******************************************************************************
 *
 *                       MSP430 CODE EXAMPLE DISCLAIMER
 *
 * MSP430 code examples are self-contained low-level programs that typically
 * demonstrate a single peripheral function or device feature in a highly
 * concise manner. For this the code may rely on the device's power-on default
 * register values and settings such as the clock configuration and care must
 * be taken when combining code from several examples to avoid potential side
 * effects. Also see www.ti.com/grace for a GUI- and www.ti.com/msp430ware
 * for an API functional library-approach to peripheral configuration.
 *
 * --/COPYRIGHT--*/
//*******************************************************************************
//  MSP430F552x Demo - Timer0_A5, PWM TA1.1-2, Up Mode, DCO SMCLK
//
//  Description: This program generates two PWM outputs on P1.2,P1.3 using
//  Timer1_A configured for up mode. The value in CCR0, 512-1, defines the PWM
//  period and the values in CCR1 and CCR2 the PWM duty cycles. Using ~1.045MHz
//  SMCLK as TACLK, the timer period is ~500us with a 75% duty cycle on P1.2
//  and 25% on P1.3.
//  ACLK = n/a, SMCLK = MCLK = TACLK = default DCO ~1.045MHz.
//
//                MSP430F552x
//            -------------------
//        /|\|                   |
//         | |                   |
//         --|RST                |
//           |                   |
//           |         P1.2/TA0.1|--> CCR1 - 75% PWM
//           |         P1.3/TA0.2|--> CCR2 - 25% PWM
//
//   Bhargavi Nisarga
//   Texas Instruments Inc.
//   April 2009
//   Built with CCSv4 and IAR Embedded Workbench Version: 4.21
//******************************************************************************

//Sample code by TI
//Edited by Michael Sorce
//Last updated 10/5/18

//*NOTE* This code blinks an offboard LED using Pin P1.2

//includes msp430 header file
#include <msp430.h>

int main(void)
{
  WDTCTL = WDTPW + WDTHOLD;// Stop Watchdog timer
  P1DIR |= BIT2;// P1.2 pin set to output
  P1SEL |= BIT2;// P1.2 options select (uses internal PWM)


  TA0CCR0 = 1000;// Max number the timer will count to (makes it run at 1kHz)
  TA0CCTL1 = OUTMOD_7;// PWM mode 7 reset/set
  TA0CCR1 = 500;// Initial duty cycle set to 50% on/off (1000/500)
  TA0CTL = TASSEL_2 + MC_1 + TACLR;//timer set up: SMCLK, up mode, clear TAR

      P1DIR |= BIT0;// Set P1.0 LED set to output direction
      P1OUT &= ~BIT0;//LED P1.0 turned off

      P1REN |= BIT1;// Enable P1.1 Button internal resistance
      P1OUT |= BIT1;// Set P1.1 Button as pull-Up resistance
      P1IES &= ~BIT1;// P1.1 Interrupt triggerd on button depress
      P1IFG &= ~BIT1;// P1.1 IFG cleared (pending interrupt flag cleared)
      P1IE |= BIT1;// P1.1 Button interrupt enabled

      //Timer A1 set up
         TA1CCR0 = 25000; //initialize capture compare register 0
         TA1CCTL0 = CCIE; //enable TimerA1 capture compare interrupt

  __bis_SR_register(LPM0_bits + GIE);// Enter LPM0 and enable general interrupt
  __no_operation();// For debugger
}

// Port 1 interrupt service routine
#pragma vector=PORT1_VECTOR
__interrupt void Port_1(void)
{
    P1OUT ^= BIT0;//toggle LED P1.0 (used for debugging)
    TA1CTL = TASSEL_2 + MC_1 + ID_3; //Starts Timer A1: uses SM clock (1MHz), in upmode, with /8 divider
    P1IFG &= ~BIT1;// P1.1 IFG cleared (clear interrupt pending flag)
}
//timer interrupt service
#pragma vector=TIMER1_A0_VECTOR
__interrupt void Timer1_A0 (void)
{
        if(TA0CCR1 < 1000)//if TA0CCR1 is less than the relative maximum clock cycles
        {
            TA0CCR1 = TA0CCR1 + 100;//increment TA0CCR1 by 10% of the maximum
        }
        else
        {
            TA0CCR1 = 0;//set TA0CCR1 to 0% of the maximum
        }
        TA1CTL = MC_0;//timer stopped
        TA1CTL = TACLR; //clears timer
}

/* --COPYRIGHT--,BSD_EX
 * Copyright (c) 2014, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *******************************************************************************
 *
 *                       MSP430 CODE EXAMPLE DISCLAIMER
 *
 * MSP430 code examples are self-contained low-level programs that typically
 * demonstrate a single peripheral function or device feature in a highly
 * concise manner. For this the code may rely on the device's power-on default
 * register values and settings such as the clock configuration and care must
 * be taken when combining code from several examples to avoid potential side
 * effects. Also see www.ti.com/grace for a GUI- and www.ti.com/msp430ware
 * for an API functional library-approach to peripheral configuration.
 *
 * --/COPYRIGHT--*/
//******************************************************************************
//  MSP430FR231x Demo - Timer0_B3, Toggle P1.0, CCR0 Up Mode ISR, DCO SMCLK
//
//  Description: Toggle P1.0 using software and TB_0 ISR. Timer0_B is
//  configured for up mode, thus the timer overflows when TBR counts
//  to CCR0. In this example, CCR0 is loaded with 50000.
//  ACLK = n/a, MCLK = SMCLK = TBCLK = default DCO ~1MHz
//
//
//           MSP430FR2311
//         ---------------
//     /|\|               |
//      | |               |
//      --|RST            |
//        |               |
//        |           P1.0|-->LED
//
//
//   Darren Lu
//   Texas Instruments Inc.
//   July 2015
//   Built with IAR Embedded Workbench v6.30 & Code Composer Studio v6.1
//******************************************************************************

//Sample code by TI
//Edited by Michael Sorce
//Last updated 10/5/18

//includes msp430 header file
#include <msp430.h>

int main(void)
{
    WDTCTL = WDTPW | WDTHOLD;// Stop Watchdog timer

    P1DIR |= BIT0;// P1.0 LED set as output
    P1OUT |= BIT0;// P1.0 LED turned on

    P2DIR |= BIT0;// P2.0 LED set as output
    P2OUT |= BIT0;// P2.0 LED turned on

    //BUTTON Interrupt set up
    P1OUT |= BIT1;//configure Button P1.1 as a pull up
    P1REN |= BIT1;//P1.1 Button pull-up register enable
    P1IES |= BIT1;// P1.3 Button trigger interrupt on button depress
    P1IE |= BIT1; //Enable button interrupt
    P1IFG &= ~BIT1;// P1.1 Button IFG cleared (No pending interrupt)

    // Disable the GPIO power-on default high-impedance mode to activate
    // previously configured port settings
    PM5CTL0 &= ~LOCKLPM5;

    //Timer0 B0 set up
    TB0CCTL0 |= CCIE;// TBCCR0 interrupt enabled
    //Set initial values for Timer0 B0 CCR registers
    TB0CCR0 = 500;
    TB0CCR1 = 1000;
    TB0CCR2 = 500;
    TB0CTL = TBSSEL__SMCLK | MC__UP;//start timer0 B0 SMCLK, in UP mode

    //Timer1 B0 set up
    TB1CCTL0 |= CCIE;// TB1CCR0 interrupt enabled
    TB1CCR0 = 25000;//CCR register set to initial value
    TB1CTL = TBSSEL__SMCLK | MC__UP | ID_3;//start timer1 B0 SMCLK, in UP mode, w/ /8 divider

    __bis_SR_register(LPM0_bits | GIE);          // Enter LPM0 w/ interrupt
    __no_operation();                            // For debug
}

// Timer0_B0 interrupt service routine
#pragma vector = TIMER0_B0_VECTOR
__interrupt void Timer0_B0_ISR (void)
{
    //If TB0CCR2 == 0, the LED should be off, so it skips the LED toggle code
       if(TB0CCR2 != 0)
       {
           if (TB0CCR0 != TB0CCR1) //if TB0CCR0 is not equal to the relative max value (represented by TB0CCR1 = 1000)
           {
               P1OUT &= ~0x01; //Turn off LED P1.0
               TB0CCR0 = TB0CCR1; //TB0CCR0 = 1000 (max value)
           }
           else
           {
               P1OUT |= 0x01; //Turn LED P1.0 on
               TB0CCR0 = TB0CCR2; //Resets TB0CCR0 to its previous value, being held by TB0CCR2
           }
       }
       else
       {
           P1OUT &= ~0x01; //Turn LED P1.0 off
       }
}
// Timer0_B0 interrupt service routine
#pragma vector = TIMER1_B0_VECTOR
__interrupt void Timer1_B0_ISR (void)
{
     P2OUT ^= BIT0;
     if(TB0CCR2 < 1000) // if TB0CCR2 is less than the max count value
     {
         TB0CCR2 = TB0CCR2 + 100; // increment TB0CCR2 by 10% of max
     }
     else
     {
         TB0CCR2 = 0; //Set TB0CCR2 to 0% of max
     }
    TB1CTL = MC__STOP;//Stops timer
    TB1CTL = TBCLR;//clears timer
}
// Port 1 interrupt service routine
#pragma vector=PORT1_VECTOR
__interrupt void Port_1(void)
{
    TB1CTL = TBSSEL__SMCLK | MC__UP | ID_3;//Starts timer1 B0
    P1IFG &= ~BIT1;                         // Clear P1.3 IFG
    __bic_SR_register_on_exit(LPM3_bits);   // Exit LPM3
}
